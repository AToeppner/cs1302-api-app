package cs1302.api;

import javafx.application.Application;
import javafx.application.Platform;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.layout.VBox;
import javafx.scene.layout.HBox;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.Priority;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.text.*;
import javafx.scene.control.ScrollPane;
import javafx.scene.control.Separator;
import javafx.scene.control.ProgressBar;
import javafx.scene.control.Button;
import javafx.scene.control.Alert;
import javafx.scene.control.TextField;
import javafx.scene.control.TextArea;
import javafx.scene.control.ComboBox;
import javafx.geometry.*;
import javafx.scene.Scene;
import javafx.stage.Stage;

/**
 * This application allows users to access summaries for Movies. This program uses the
 * OMDb API to search for movies. Using the output from this API, this program then uses
 * OpenAI's API to generate a summary of the movie with ChatGPT 3.5.
 */
public class ApiApp extends Application {
    Stage stage;
    Scene scene;
    VBox root;
    HBox searchLayer;
    HBox statusLayer;
    ScrollPane resultLayer;
    HBox creditLayer;
    TextField searchBox;
    Text statusText;
    Button searchButton;
    HBox resultLayout;
    HBox[] results;
    ImageView[] imageViews;
    OMDBresults res;


    /**
     * Constructs an {@code ApiApp} object. This default (i.e., no argument)
     * constructor is executed in Step 2 of the JavaFX Application Life-Cycle.
     */
    public ApiApp() {
        root = new VBox();
        // Layers
        searchLayer = new HBox(8);
        searchLayer.setAlignment(Pos.CENTER);
        searchLayer.setPadding(new Insets(4, 4, 4, 4));
        statusLayer = new HBox(8);
        statusLayer.setAlignment(Pos.CENTER);
        statusLayer.setPadding(new Insets(4, 4, 4, 4));
        resultLayer = new ScrollPane();
        creditLayer = new HBox(8);
        creditLayer.setAlignment(Pos.CENTER_LEFT);
        creditLayer.setPadding(new Insets(4, 4, 4, 4));
        resultLayout = new HBox(8);
        resultLayout.setAlignment(Pos.CENTER);
        results = new HBox[20];
        imageViews = new ImageView[20];
        // TextFields
        searchBox = new TextField();
        // Text
        statusText = new Text("To get started, search for a Movie");
        // Buttons
        searchButton = new Button("Search");
    } // ApiApp

    /** {@inheritDoc} */
    @Override
    public void init() {
        // Setup Scene
        root.getChildren().addAll(searchLayer, statusLayer, resultLayer, creditLayer);
        searchLayer.getChildren().addAll(searchBox, searchButton);
        statusLayer.getChildren().addAll(statusText);
        resultLayer.setContent(resultLayout);
        Text credit = new Text("Movie poster and information provided by OMDb API;"
            + "summary generated by OpenAI API.");
        creditLayer.getChildren().addAll(credit);


        EventHandler<ActionEvent> searchClicked = (ActionEvent e) -> {
            statusText.setText("Getting results for " + searchBox.getText() + "...");
            this.results = new HBox[20];
            searchMovies(searchBox.getText());
            this.searchButton.setDisable(true);
        };

        searchButton.setOnAction(searchClicked);
    }

    /** {@inheritDoc} */
    @Override
    public void start(Stage stage) {
        this.stage = stage;
        scene = new Scene(root, 600, 560);
        // Setup Stage
        stage.setTitle("TL;DR");
        stage.setScene(scene);
        stage.setOnCloseRequest(event -> Platform.exit());
        stage.sizeToScene();
        stage.show();
        Platform.runLater(() -> stage.setResizable(false));

    } // start

    /**
     * Takes the inputted {@code query} and searches for results on the
     * OMDB Search API.
     *
     * @param query the query string to search
     */

    public void searchMovies(String query) {
        try {
            resultLayout.getChildren().clear();
            String json = OMDBsearch.search(query);
            this.res = OMDBsearch.parseJSON(json);
            //EventHandler<ActionEvent> infoClicked = (ActionEvent e) -> {
            //detailInfo(index);
            // this.searchButton.setDisable(true);
            // };
            HBox resultRoot = new HBox(8);
            VBox info = new VBox(8);
            //Button infoButton = new Button("Info");
            //infoButton.setOnAction(infoClicked);
            Text title = new Text(this.res.title);
            title.setFont(Font.font("System", FontWeight.BOLD, 18));
            ImageView imgView = new ImageView();
            imgView.setFitWidth(100);
            imgView.setFitHeight(100);
            info.getChildren().addAll(title);
            runNow(() -> displayCovers());
        } catch (Exception e) {
            alertError(e);
        }
    } // searchBooks

    /**
     * Displays detailed information about the Movie including a ChatGPT summary of the movie
     * generated by the OpenAI API.
     *
     * @param index the result index of the button clicked
     *
    public void detailInfo(int index) {
        // Layout
        VBox bookLayout = new VBox(8);
        HBox infoLayout = new HBox(8);
        VBox coverCol = new VBox(8);
        Button backBtn = new Button("< Back");
        EventHandler<ActionEvent> backClicked = (ActionEvent e) -> {
            this.resultLayer.setContent(resultLayout);
            this.searchButton.setDisable(false);
        };
        backBtn.setOnAction(backClicked);
        // Book Cover
        ImageView cover = new ImageView();
        cover.setFitWidth(400);
        cover.setFitHeight(600);
        Image img = new Image(OLS_IMAGE_ENDPOINT + this.res.docs[index].id + "-L.jpg");
        cover.setImage(img);
        VBox infoCol = new VBox(8);
        // Title
        Text titleHeader = new Text("Title");
        titleHeader.setFont(Font.font("System", FontWeight.BOLD, 22));
        Text title = new Text(this.res.docs[index].title);
        // Author
        Text authorHeader = new Text("Author");
        authorHeader.setFont(Font.font("System", FontWeight.BOLD, 22));
        Text author = new Text(this.res.docs[index].author[0]);
        // Year released
        Text pubHeader = new Text("Release Year");
        pubHeader.setFont(Font.font("System", FontWeight.BOLD, 22));
        Text relYear = new Text(String.valueOf(this.res.docs[index].relYear));
        // Summary
        Text summaryHeader = new Text("Movie Summary (generated by OpenAI API) : ");
        summaryHeader.setFont(Font.font("System", FontWeight.BOLD, 22));
        TextArea summaryBox = new TextArea();
        summaryBox.setWrapText(true);
        summaryBox.setPrefColumnCount(20);
        summaryBox.setPrefRowCount(25);
        // Add Nodes to scene
        bookLayout.getChildren().addAll(backBtn, infoLayout);
        coverCol.getChildren().addAll(cover);
        infoCol.getChildren().addAll(titleHeader, title, authorHeader, author, pubHeader, pubYear,
            summaryHeader, summaryBox);
        infoLayout.getChildren().addAll(coverCol, infoCol);
        this.resultLayer.setContent(bookLayout); // Display detailed info
        try { // Generate ChatGPT Book Summary
            OpenAIAPI gpt = new OpenAIAPI();
            String json = gpt.search(title.getText() + " by " + author.getText());
            OpenAIResults results = gpt.parseJSON(json);
            String summary = results.choices[0].message.content;
            summaryBox.setText(summary);
        } catch (Exception e) {
            alertError(e);
        }
    }

    /**
     * Updates images of results book covers with the downloaded images.
     */

    public void displayCovers() {
        this.statusText.setText("Results Found! Downloading cover image");
        String posterUrl = this.res.poster;
        if (posterUrl != null && !posterUrl.isEmpty()) {
            if (Platform.isFxApplicationThread()) {
                Image posterImage = new Image(posterUrl);
                ImageView imageView = new ImageView(posterImage);
                imageView.setFitWidth(200);
                imageView.setFitHeight(300);
                resultLayout.setAlignment(Pos.CENTER);
                this.resultLayout.getChildren().add(imageView);
                this.statusText.setText("Results Found!");
                this.searchButton.setDisable(false);

            } else {
                Platform.runLater(() -> {
                    Image posterImage = new Image(posterUrl);
                    ImageView imageView = new ImageView(posterImage);
                    imageView.setFitWidth(200);
                    imageView.setFitHeight(300);
                    resultLayout.setAlignment(Pos.CENTER);
                    this.resultLayout.getChildren().add(imageView);
                    this.statusText.setText("Results Found!");
                    this.searchButton.setDisable(false);
                }); // runLater
            } //else
        } else {
            Platform.runLater(() -> this.statusText.setText("No poster available."));
        }
    } // display covers

    /**
     * Creates a daemon-thread to run {@code target} in parallel.
     *
     * @param target the target method to run on a new thread
     */

    public static void runNow(Runnable target) {
        Thread task = new Thread(target);
        task.setDaemon(true);
        task.start();
    } // runNow

    /**
     * Displays a model error based on {@code cause}.
     * @param cause a {@link java.lang.Throwable Throwable}} that cause the alert
     */
    public void alertError(Throwable cause) {
        TextArea err = new TextArea("Exception: " + cause.toString());
        err.setWrapText(true);
        err.setEditable(false);
        Alert alert = new Alert(Alert.AlertType.ERROR);
        alert.getDialogPane().setContent(err);
        alert.setResizable(true);
        alert.showAndWait();
    } // alertError

} // ApiApp
