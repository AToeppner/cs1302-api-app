package cs1302.api;

import javafx.application.Application;
import javafx.application.Platform;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.layout.VBox;
import javafx.scene.layout.HBox;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.Priority;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.text.*;
import javafx.scene.control.ScrollPane;
import javafx.scene.control.Separator;
import javafx.scene.control.ProgressBar;
import javafx.scene.control.Button;
import javafx.scene.control.Alert;
import javafx.scene.control.TextField;
import javafx.scene.control.TextArea;
import javafx.scene.control.ComboBox;
import javafx.geometry.*;
import javafx.scene.Scene;
import javafx.stage.Stage;

/**
 * This application allows users to access summaries for Movies. This program uses the
 * OMDb API to search for movies. Using the output from this API, this program then uses
 * OpenAI's API to generate a summary of the movie with ChatGPT 3.5.
 */
public class ApiApp extends Application {
    Stage stage;
    Scene scene;
    VBox root;
    HBox searchLayer;
    HBox statusLayer;
    ScrollPane resultLayer;
    HBox creditLayer;
    TextField searchBox;
    Text statusText;
    Button searchButton;
    StackPane centeredBox;
    HBox resultLayout;
    HBox textLayer;
    HBox[] results;
    ImageView[] imageViews;
    OMDBresults res;


    /**
     * Constructs an {@code ApiApp} object. This default (i.e., no argument)
     * constructor is executed in Step 2 of the JavaFX Application Life-Cycle.
     */
    public ApiApp() {
        root = new VBox();
        // Layers
        searchLayer = new HBox(8);
        searchLayer.setAlignment(Pos.CENTER);
        searchLayer.setPadding(new Insets(4, 4, 4, 4));
        statusLayer = new HBox(8);
        statusLayer.setAlignment(Pos.CENTER);
        statusLayer.setPadding(new Insets(4, 4, 4, 4));
        resultLayer = new ScrollPane();
        creditLayer = new HBox(16);
        creditLayer.setAlignment(Pos.CENTER_LEFT);
        creditLayer.setPadding(new Insets(2, 2, 2, 2));
        resultLayout = new HBox(16);
        textLayer = new HBox(16);
        textLayer.setAlignment(Pos.CENTER_LEFT);
        results = new HBox[5];
        imageViews = new ImageView[20];
        // TextFields
        searchBox = new TextField();
        // Text
        statusText = new Text("To get started, search for a Movie");
        // Buttons
        searchButton = new Button("Search");
    } // ApiApp

    /** {@inheritDoc} */
    @Override
    public void init() {
        // Setup Scene
        root.getChildren().addAll(searchLayer, statusLayer, resultLayer, creditLayer, textLayer);
        searchLayer.getChildren().addAll(searchBox, searchButton);
        statusLayer.getChildren().addAll(statusText);
        resultLayer.setContent(resultLayout);
        Text credit = new Text("Movie poster and information provided by OMDb API;"
            + "summary generated by OpenAI API.");
        creditLayer.getChildren().addAll(credit);


        EventHandler<ActionEvent> searchClicked = (ActionEvent e) -> {
            statusText.setText("Getting results for " + searchBox.getText() + "...");
            this.results = new HBox[4];
            searchMovies(searchBox.getText());
            this.searchButton.setDisable(false);
        };

        searchButton.setOnAction(searchClicked);
    }

    /** {@inheritDoc} */
    @Override
    public void start(Stage stage) {
        this.stage = stage;
        scene = new Scene(root, 620, 560);
        // Setup Stage
        stage.setTitle("TL;DR");
        stage.setScene(scene);
        stage.setOnCloseRequest(event -> Platform.exit());
        stage.sizeToScene();
        stage.show();
        Platform.runLater(() -> stage.setResizable(false));

    } // start

    /**
     * Takes the inputted {@code query} and searches for results on the
     * OMDB Search API.
     *
     * @param query the query string to search
     */

    public void searchMovies(String query) {
        try {
            String json = OMDBsearch.search(query);
            this.res = OMDBsearch.parseJSON(json);
            if (this.res.title != null) {
                runNow(() -> displayCovers());
                detailInfo(this.res.title);
            } else {
                this.searchButton.setDisable(false);
                throw new Exception("No movie found with that title");
            }
        } catch (Exception e) {
            alertError(e);
        }
    } // searchBooks

    /**
     * Displays detailed information about the Movie including a ChatGPT summary of the movie
     * generated by the OpenAI API.
     *
     * @param query the movie being searched for
     */

    public void detailInfo(String query) {
        // Layout
        VBox movieLayout = new VBox(18);
        HBox infoLayout = new HBox(18);
        VBox infoCol = new VBox(18);
        // Title

        // Year released

        // Summary
        Text summaryHeader = new Text("Movie Summary (generated by OpenAI API) : ");
        summaryHeader.setFont(Font.font("System", FontWeight.BOLD, 20));
        TextArea summaryBox = new TextArea();
        summaryBox.setWrapText(true);
        summaryBox.setPrefColumnCount(22);
        summaryBox.setPrefRowCount(10);
        StackPane scrollPane = new StackPane(summaryBox);
        // Add Nodes to scene
        try { // Generate ChatGPT Movie Summary
            OpenAIAPI gpt = new OpenAIAPI();
            String json = gpt.search(query);
            OpenAIResults results = gpt.parseJSON(json);
            String summary = results.choices[0].message.content;
            summaryBox.setText(summary);
            summaryBox.setEditable(false);
        } catch (Exception e) {
            alertError(e);
        }
        infoLayout.setAlignment(Pos.CENTER_RIGHT);
        infoCol.getChildren().addAll(summaryHeader, scrollPane);
        infoLayout.getChildren().clear();
        infoLayout.getChildren().add(infoCol);  // Display title, year, and summary
        movieLayout.getChildren().add(infoLayout);
        textLayer.getChildren().clear();
        textLayer.getChildren().add(movieLayout);
    }

    /**
     * Updates images of results book covers with the downloaded images.
     */

    public void displayCovers() {
        String posterUrl = this.res.poster;
        try {
            if (posterUrl == null || posterUrl.isEmpty()) {
                throw new Exception("No poster found for the movie" );
            }
            if (posterUrl != null && !posterUrl.isEmpty()) {
                Runnable updateUI = () -> {
                    this.statusText.setText("Results Found! Downloading cover image");
                    Image posterImage = new Image(posterUrl);
                    ImageView imageView = new ImageView(posterImage);
                    imageView.setFitWidth(200);
                    imageView.setFitHeight(270);
                    StackPane centeredBox = new StackPane(imageView);
                    centeredBox.setStyle("-fx-background-color: lightgray;");
                    centeredBox.setPadding(new Insets(5));
                    this.resultLayout.getChildren().clear();
                    this.resultLayout.getChildren().add(centeredBox);
                    this.statusText.setText("Results Found!");
                    this.searchButton.setDisable(false);
                };
                if (Platform.isFxApplicationThread()) {
                    updateUI.run();
                } else {
                    Platform.runLater(updateUI);
                }
            }
        } catch (Exception e) {
            alertError(e);
        }  //catch
    } //display covers
    /**
     * Creates a daemon-thread to run {@code target} in parallel.
     *
     * @param target the target method to run on a new thread
     */

    public static void runNow(Runnable target) {
        Thread task = new Thread(target);
        task.setDaemon(true);
        task.start();
    } // runNow

    /**
     * Displays a model error based on {@code cause}.
     * @param cause a {@link java.lang.Throwable Throwable}} that cause the alert
     */
    public void alertError(Throwable cause) {
        TextArea err = new TextArea("Exception: " + cause.toString());
        err.setWrapText(true);
        err.setEditable(false);
        Alert alert = new Alert(Alert.AlertType.ERROR);
        alert.getDialogPane().setContent(err);
        alert.setResizable(true);
        alert.showAndWait();
    } // alertError

} // ApiApp
